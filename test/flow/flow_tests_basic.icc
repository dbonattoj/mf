/*
Author : Tim Lenertz
Date : May 2016

Copyright (c) 2016, Universit√© libre de Bruxelles

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files to deal in the Software without restriction, including the rights to use, copy, modify, merge,
publish the Software, and to permit persons to whom the Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/


SECTION("basic") {	
	flow::filter_graph gr;
	auto shp = make_ndsize(10, 10);

	std::size_t count = 20;
	std::size_t last = count - 1;
	std::vector<int> seq(count);
	for(int i = 0; i < count; ++i) seq[i] = i;

#if 0
	SECTION("source -> sink") {
		auto& source = gr.add_filter<sequence_frame_source>(last, shp, seekable);
		auto& sink = gr.add_filter<expected_frames_sink>(seq);
		
		source.set_asynchonous(async1);
		sink.input.connect(source.output);
		
		gr.setup();
		gr.run();
		
		REQUIRE(sink.check());

	}

	SECTION("source --> passthrough --> sink") {
		auto& source = gr.add_filter<sequence_frame_source>(last, shp, seekable);
		auto& passthrough = gr.add_filter<passthrough_filter>(0, 0);
		auto& sink = gr.add_filter<expected_frames_sink>(seq);
		
		source.set_asynchonous(async1);
		passthrough.set_asynchonous(async1);
		passthrough.input.connect(source.output);
		sink.input.connect(passthrough.output);
		
		gr.setup();
		gr.run();
		
		REQUIRE(sink.check());
	}

	SECTION("source1 --> [+3]passthrough1 --> sink") {
		auto& source1 = gr.add_filter<sequence_frame_source>(last, shp, seekable);
		auto& passthrough1 = gr.add_filter<passthrough_filter>(0, 3);
		auto& sink = gr.add_filter<expected_frames_sink>(seq);
		
		source1.set_asynchonous(async1);
		passthrough1.set_asynchonous(async1);
		passthrough1.input.connect(source1.output);
		sink.input.connect(passthrough1.output);
		
		gr.setup();
		gr.run();
		
		REQUIRE(gr.current_time() == seq.size()-1);
		REQUIRE(sink.check());
	}

	SECTION("source1 --> [-3]passthrough1 --> sink") {
		auto& source1 = gr.add_filter<sequence_frame_source>(last, shp, seekable);
		auto& passthrough1 = gr.add_filter<passthrough_filter>(3, 0);
		auto& sink = gr.add_filter<expected_frames_sink>(seq);
		
		source1.set_asynchonous(async1);
		passthrough1.set_asynchonous(async1);	
		passthrough1.input.connect(source1.output);
		sink.input.connect(passthrough1.output);
		
		gr.setup();
		gr.run();
				
		REQUIRE(gr.current_time() == seq.size()-1);
		REQUIRE(sink.check());
	}

	SECTION("source1 --> [-3,+3]passthrough1 --> sink") {
		auto& source1 = gr.add_filter<sequence_frame_source>(last, shp, seekable);
		auto& passthrough1 = gr.add_filter<passthrough_filter>(3, 3);
		auto& sink = gr.add_filter<expected_frames_sink>(seq);
		
		source1.set_asynchonous(async1);
		passthrough1.set_asynchonous(async1);
		passthrough1.input.connect(source1.output);
		sink.input.connect(passthrough1.output);
		
		gr.setup();
	
		gr.run();
				
		REQUIRE(gr.current_time() == seq.size()-1);
		REQUIRE(sink.check());
	}

	SECTION("source1 --> [-3,+1]passthrough1 --> [-2,+2]passthrough2' --> sink") {
		auto& source1 = gr.add_filter<sequence_frame_source>(last, shp, seekable);
		auto& passthrough1 = gr.add_filter<passthrough_filter>(3, 1);
		auto& passthrough2 = gr.add_filter<passthrough_filter>(2, 2);
		auto& sink = gr.add_filter<expected_frames_sink>(seq);
	
		source1.set_asynchonous(async1);
		passthrough1.set_asynchonous(async1);
		passthrough2.set_asynchonous(async2);
		passthrough1.input.connect(source1.output);
		passthrough2.input.connect(passthrough1.output);
		sink.input.connect(passthrough2.output);
		
		gr.setup();
	
		gr.run();
		
		REQUIRE(gr.current_time() == seq.size()-1);
		REQUIRE(sink.check());
	}

	
	SECTION("detailled time window test") { 
		const std::vector<int>& seq { 0, 1, 2, 3, 4, 5 };
		auto& source = gr.add_filter<sequence_frame_source>(5, shp, seekable);
		auto& sink = gr.add_filter<expected_frames_sink>(seq);

		source.set_asynchonous(async1);	
	
		SECTION("source --> [-3]pass --> sink") {
			auto& node = gr.add_filter<passthrough_filter>(3, 0);

			node.set_asynchonous(async1);	
			node.input.connect(source.output);
			sink.input.connect(node.output);
			gr.setup();
				
			node.callback = [&](passthrough_filter& self, flow::filter_job& job) {
				auto in = job.in(self.input);
				auto in_full = job.in_full(self.input);
				std::ptrdiff_t center = in_full.time_index(job.time());
			
				switch(job.time()) {
				case 0:
					REQUIRE(in == make_frame(shp, 0));
					REQUIRE(center == 0);
					REQUIRE(compare_frames(shp, in_full, { 0 }));
					break;
	
				case 1:
					REQUIRE(in == make_frame(shp, 1));
					REQUIRE(center == 1);
					REQUIRE(compare_frames(shp, in_full, { 0, 1 }));
					break;
	
				case 2:
					REQUIRE(in == make_frame(shp, 2));
					REQUIRE(center == 2);
					REQUIRE(compare_frames(shp, in_full, { 0, 1, 2 }));
					break;
		
				case 3:
					REQUIRE(in == make_frame(shp, 3));
					REQUIRE(center == 3);
					REQUIRE(compare_frames(shp, in_full, { 0, 1, 2, 3 }));
					break;
					
				case 4:
					REQUIRE(in == make_frame(shp, 4));
					REQUIRE(center == 3);
					REQUIRE(compare_frames(shp, in_full, { 1, 2, 3, 4 }));
					break;
				
				case 5:
					REQUIRE(in == make_frame(shp, 5));
					REQUIRE(center == 3);
					REQUIRE(compare_frames(shp, in_full, { 2, 3, 4, 5 }));
					break;
				}
			};
	
			gr.run();
			
			REQUIRE(sink.check());	
		}

		SECTION("source --> [+3]pass --> sink") {
			auto& node = gr.add_filter<passthrough_filter>(0, 3);

			node.set_asynchonous(async1);	
			node.input.connect(source.output);
			sink.input.connect(node.output);
			gr.setup();
			
			node.callback = [&](passthrough_filter& self, flow::filter_job& job) {
				auto in = job.in(self.input);
				auto in_full = job.in_full(self.input);
				std::ptrdiff_t center = in_full.time_index(job.time());
			
				switch(job.time()) {
				case 0:
					REQUIRE(in == make_frame(shp, 0));
					REQUIRE(center == 0);
					REQUIRE(compare_frames(shp, in_full, { 0, 1, 2, 3 }));
					break;
	
				case 1:
					REQUIRE(in == make_frame(shp, 1));
					REQUIRE(center == 0);
					REQUIRE(compare_frames(shp, in_full, { 1, 2, 3, 4 }));
					break;
	
				case 2:
					REQUIRE(in == make_frame(shp, 2));
					REQUIRE(center == 0);
					REQUIRE(compare_frames(shp, in_full, { 2, 3, 4, 5 }));
					break;
		
				case 3:
					REQUIRE(in == make_frame(shp, 3));
					REQUIRE(center == 0);
					REQUIRE(compare_frames(shp, in_full, { 3, 4, 5 }));
					break;
					
				case 4:
					REQUIRE(in == make_frame(shp, 4));
					REQUIRE(center == 0);
					REQUIRE(compare_frames(shp, in_full, { 4, 5 }));
					break;
				
				case 5:
					REQUIRE(in == make_frame(shp, 5));
					REQUIRE(center == 0);
					REQUIRE(compare_frames(shp, in_full, { 5 }));
					break;
				}
			};
			
			gr.run();
			
			REQUIRE(sink.check());
		}

		SECTION("source --> [-3,+3]pass --> sink") {
			auto& node = gr.add_filter<passthrough_filter>(3, 3);

			node.set_asynchonous(async1);	
			node.input.connect(source.output);
			sink.input.connect(node.output);
			gr.setup();
			
			node.callback = [&](passthrough_filter& self, flow::filter_job& job) {
				auto in = job.in(self.input);
				auto in_full = job.in_full(self.input);
				std::ptrdiff_t center = in_full.time_index(job.time());
			
				switch(job.time()) {
				case 0:
					REQUIRE(in == make_frame(shp, 0));
					REQUIRE(center == 0);
					REQUIRE(compare_frames(shp, in_full, { 0, 1, 2, 3 }));
					break;
	
				case 1:
					REQUIRE(in == make_frame(shp, 1));
					REQUIRE(center == 1);
					REQUIRE(compare_frames(shp, in_full, { 0, 1, 2, 3, 4 }));
					break;
	
				case 2:
					REQUIRE(in == make_frame(shp, 2));
					REQUIRE(center == 2);
					REQUIRE(compare_frames(shp, in_full, { 0, 1, 2, 3, 4, 5 }));
					break;
		
				case 3:
					REQUIRE(in == make_frame(shp, 3));
					REQUIRE(center == 3);
					REQUIRE(compare_frames(shp, in_full, { 0, 1, 2, 3, 4, 5 }));
					break;
					
				case 4:
					REQUIRE(in == make_frame(shp, 4));
					REQUIRE(center == 3);
					REQUIRE(compare_frames(shp, in_full, { 1, 2, 3, 4, 5 }));
					break;
				
				case 5:
					REQUIRE(in == make_frame(shp, 5));
					REQUIRE(center == 3);
					REQUIRE(compare_frames(shp, in_full, { 2, 3, 4, 5 }));
					break;
				}
			};
	
			gr.run();
			REQUIRE(sink.check());
		}
	}



	SECTION("multiple inputs") {
		auto& source1 = gr.add_filter<sequence_frame_source>(last, shp, seekable);
		auto& source2 = gr.add_filter<sequence_frame_source>(last, shp, seekable);
		auto& sink = gr.add_filter<expected_frames_sink>(seq);
		auto& merge = gr.add_filter<input_synchronize_test_filter>();

		source1.set_asynchonous(async1);
		source2.set_asynchonous(async1);
		merge.set_asynchonous(async1);
		
		SECTION("graph 1") {
			INFO(R"(
			source1 --> [+5]passthrough --> merge --> sink
			source2 ----------------------> /
			)");
			
			auto& passthrough = gr.add_filter<passthrough_filter>(0, 5);

			passthrough.set_asynchonous(async1);		
			passthrough.input.connect(source1.output);
			merge.input1.connect(passthrough.output);
			merge.input2.connect(source2.output);
			sink.input.connect(merge.output);
		
			gr.setup();
			gr.run();
			
			REQUIRE(gr.current_time() == seq.size()-1);
			REQUIRE(sink.check());
		}
	
		SECTION("graph 2") {
			INFO(R"(
			source1 --> [-3, +1]passthrough1 ---> merge --> sink
			source2 --> [-1, +2]passthrough2' --> /
			)");
			
			auto& passthrough1 = gr.add_filter<passthrough_filter>(3, 1);
			auto& passthrough2 = gr.add_filter<passthrough_filter>(1, 2);

			passthrough1.set_asynchonous(async1);
			passthrough2.set_asynchonous(async2);		
			passthrough1.input.connect(source1.output);
			passthrough2.input.connect(source2.output);
			merge.input1.connect(passthrough1.output);
			merge.input2.connect(passthrough2.output);
			sink.input.connect(merge.output);
		
			gr.setup();
			gr.run();
			
			REQUIRE(gr.current_time() == seq.size()-1);
			REQUIRE(sink.check());
		}
		
		SECTION("graph 3") {
			INFO(R"(
			source1 --> [-3, +1]passthrough1 ----------------------------> merge --> sink
			source2 --> [-2, +2]passthrough3 --> [-1, +2]passthrough2' --> /
			)");
			
			auto& passthrough1 = gr.add_filter<passthrough_filter>(3, 1);
			auto& passthrough2 = gr.add_filter<passthrough_filter>(1, 2);
			auto& passthrough3 = gr.add_filter<passthrough_filter>(2, 2);
		
			passthrough1.set_asynchonous(async1);
			passthrough2.set_asynchonous(async2);
			passthrough3.set_asynchonous(async1);
			passthrough1.input.connect(source1.output);
			passthrough3.input.connect(source2.output);
			passthrough2.input.connect(passthrough3.output);
			merge.input1.connect(passthrough1.output);
			merge.input2.connect(passthrough2.output);
			sink.input.connect(merge.output);
		
			gr.setup();			
			gr.run();
			
			REQUIRE(gr.current_time() == seq.size()-1);
			REQUIRE(sink.check());
		}
	}
	

	SECTION("multiple outputs") {
		auto& source = gr.add_filter<sequence_frame_source>(last, shp, seekable);
		auto& sink = gr.add_filter<expected_frames_sink>(seq);
		auto& multiout = gr.add_filter<multiple_output_filter>();

		source.set_asynchonous(async1);
		multiout.set_asynchonous(async1);

		SECTION("graph 1") {
			INFO(R"(
			source --> multiout --> merge --> sink
			                  | --> /
			)");
			
			auto& merge = gr.add_filter<input_synchronize_test_filter>();
			merge.set_asynchonous(async1);

			multiout.input.connect(source.output);
			merge.input1.connect(multiout.output1);
			merge.input2.connect(multiout.output2);
			sink.input.connect(merge.output);
			
			gr.setup();
			gr.run();
			REQUIRE(sink.check());
		}
		
		
		SECTION("graph 2") {
			INFO(R"(
			source --> multiout --> [-3, +1]passthrough1  --> merge --> sink
			                  | --> [-1, +2]passthrough2' --> /
			)");
			

			auto& passthrough1 = gr.add_filter<passthrough_filter>(3, 1);
			auto& passthrough2 = gr.add_filter<passthrough_filter>(1, 2);
			auto& merge = gr.add_filter<input_synchronize_test_filter>();
			
			passthrough1.set_asynchonous(async1);
			passthrough2.set_asynchonous(async2);
			merge.set_asynchonous(async1);

			multiout.input.connect(source.output);
			passthrough1.input.connect(multiout.output1);
			passthrough2.input.connect(multiout.output2);
			merge.input1.connect(passthrough1.output);
			merge.input2.connect(passthrough2.output);
			sink.input.connect(merge.output);
			
			gr.setup();
			gr.run();
			REQUIRE(sink.check());
		}
	}
	
	
	
	SECTION("one-to-many") {	
		std::size_t count = 50;
		std::size_t last = count - 1;
		std::vector<int> seq(count);
		for(int i = 0; i < seq.size(); ++i) seq[i] = i;
	
		SECTION("basic") {
			INFO(R"(
			source ----> merge --> sink
			        +--> /
			)");
			
			auto& source = gr.add_filter<sequence_frame_source>(last, shp, seekable);
			auto& merge = gr.add_filter<input_synchronize_test_filter>();
			auto& sink = gr.add_filter<expected_frames_sink>(seq);
			
			source.set_asynchonous(async1);
			merge.set_asynchonous(async1);
			
			merge.input1.connect(source.output);
			merge.input2.connect(source.output);
			sink.input.connect(merge.output);
	
			gr.setup();
			gr.run();
			
			REQUIRE(sink.check());
		}

		SECTION("different connected filters") {
			INFO(R"(
			source ----> passthrough' --> merge --> sink
			        +------------------ > /
			)");
			
			auto& source = gr.add_filter<sequence_frame_source>(last, shp, seekable);
			auto& passthrough = gr.add_filter<passthrough_filter>(0, 0);
			auto& merge = gr.add_filter<input_synchronize_test_filter>();
			auto& sink = gr.add_filter<expected_frames_sink>(seq);
			
			source.set_asynchonous(async1);
			merge.set_asynchonous(async1);
			passthrough.set_asynchonous(async2);
			
			passthrough.input.connect(source.output);
			merge.input1.connect(passthrough.output);
			merge.input2.connect(source.output);
			sink.input.connect(merge.output);
	
			gr.setup();
			gr.run();

			REQUIRE(sink.check());
		}

		SECTION("time windows") {
			INFO(R"(
			source -+--> [-3, +1]passthrough1  --> merge --> sink
			        +--> [-1, +2]passthrough2' --> /
			)");
			
			auto& source = gr.add_filter<sequence_frame_source>(last, shp, seekable);
			auto& passthrough1 = gr.add_filter<passthrough_filter>(3, 1);
			auto& passthrough2 = gr.add_filter<passthrough_filter>(1, 2);
			auto& merge = gr.add_filter<input_synchronize_test_filter>();
			auto& sink = gr.add_filter<expected_frames_sink>(seq);
			
			source.set_asynchonous(async1);
			passthrough1.set_asynchonous(async1);
			passthrough2.set_asynchonous(async2);
			merge.set_asynchonous(async1);
			
			passthrough1.input.connect(source.output);
			passthrough2.input.connect(source.output);
			merge.input1.connect(passthrough1.output);
			merge.input2.connect(passthrough2.output);
			sink.input.connect(merge.output);
	
			gr.setup();
			gr.run();
			
			REQUIRE(sink.check());
		}
	}


	SECTION("implicit conversion") {
		SECTION("conversion") {
			INFO(R"(
			source --> tofloat --[]--> sink
			)");
			
			auto& source = gr.add_filter<sequence_frame_source>(last, shp, seekable);
			auto& tofloat = gr.add_filter<to_float_filter>();
			auto& sink = gr.add_filter<expected_frames_sink>(seq);
			
			tofloat.input.connect(source.output);
			sink.input.connect(tofloat.output, to_int);
			
			source.set_asynchonous(async1);
			tofloat.set_asynchonous(async1);
			
			gr.setup();
			gr.run();
			
			REQUIRE(sink.check());
		}
	}
#endif	

	SECTION("complex") {
		flow::filter_graph gr;
		auto shp = make_ndsize(10, 10);
	
		std::size_t count = 50;
		std::size_t last = count - 1;
		std::vector<int> seq(count);
		for(int i = 0; i < seq.size(); ++i) seq[i] = i;

		SECTION("graph 1") {
			INFO(R"(
			source1' -+--> [-3, +1]passthrough1 --> [-1, +0]passthrough2' --> merge1 --> merge2' --> sink 
			          +-----------------------------------------------------> /     /--> /
			                                                                       /
			source2  --> [-1, +2]passthrough3' -----------------------------------/
			)");
			
			auto& source1 = gr.add_filter<sequence_frame_source>(last, shp, seekable);
			auto& source2 = gr.add_filter<sequence_frame_source>(last, shp, seekable);
			auto& passthrough1 = gr.add_filter<passthrough_filter>(3, 1);
			auto& passthrough2 = gr.add_filter<passthrough_filter>(1, 0);
			auto& passthrough3 = gr.add_filter<passthrough_filter>(1, 2);
			auto& merge1 = gr.add_filter<input_synchronize_test_filter>();
			auto& merge2 = gr.add_filter<input_synchronize_test_filter>();
			auto& sink = gr.add_filter<expected_frames_sink>(seq);
			
			source1.set_asynchonous(async2);
			source2.set_asynchonous(async1);
			passthrough1.set_asynchonous(async1);
			passthrough2.set_asynchonous(async2);
			passthrough3.set_asynchonous(async2);
			merge1.set_asynchonous(async1);
			merge2.set_asynchonous(async2);
			
			passthrough1.input.connect(source1.output);
			passthrough2.input.connect(passthrough1.output);
			merge1.input1.connect(passthrough2.output);
			merge1.input2.connect(source1.output);
			passthrough3.input.connect(source2.output);
			merge2.input1.connect(merge1.output);
			merge2.input2.connect(passthrough3.output);
			sink.input.connect(merge2.output);
	
			gr.setup();
			
			flow::processing_timeline timeline(*gr.node_graph_);
			//gr.node_graph_->set_diagnostic(timeline);
			
			gr.run();

/*			flow::processing_timeline_json_exporter timeline_export(timeline);
			std::ofstream json("timeline.json");
			timeline_export.generate(json);
*/			
			REQUIRE(sink.check());
		}
		
return;
		SECTION("graph 2") {
			INFO(R"(
			source1' -+--> [-3, +1]pass1 --> [-1, +0]pass2 ------------> merge1' -------------> merge2' --> sink 
			          |                                             /--> /                / -->
			          +--------------------------------> merge3' --/                     /
			          `                            | --> /                              /
			source2  --> [-1, +2]pass3' --> multiout                                   /
			          ,                            | --> [-1, +1]pass4' --> merge4' --/
			          +--------------------------------------------------->                            
			)");

			
			auto& source1 = gr.add_filter<sequence_frame_source>(last, shp, seekable);
			auto& source2 = gr.add_filter<sequence_frame_source>(last, shp, seekable);
			auto& passthrough1 = gr.add_filter<passthrough_filter>(3, 1);
			auto& passthrough2 = gr.add_filter<passthrough_filter>(1, 0);
			auto& passthrough3 = gr.add_filter<passthrough_filter>(1, 2);
			auto& passthrough4 = gr.add_filter<passthrough_filter>(1, 1);
			auto& merge1 = gr.add_filter<input_synchronize_test_filter>();
			auto& merge2 = gr.add_filter<input_synchronize_test_filter>();
			auto& merge3 = gr.add_filter<input_synchronize_test_filter>();
			auto& merge4 = gr.add_filter<input_synchronize_test_filter>();
			auto& multiout = gr.add_filter<multiple_output_filter>();
			auto& sink = gr.add_filter<expected_frames_sink>(seq);
			
			source1.set_asynchonous(async2);
			source2.set_asynchonous(async1);
			passthrough1.set_asynchonous(async1);
			passthrough2.set_asynchonous(async1);
			passthrough3.set_asynchonous(async2);
			passthrough4.set_asynchonous(async2);
			merge1.set_asynchonous(async2);
			merge2.set_asynchonous(async1);
			merge3.set_asynchonous(async2);
			merge4.set_asynchonous(async2);
			multiout.set_asynchonous(async1);
			
			passthrough1.input.connect(source1.output);
			passthrough2.input.connect(passthrough1.output);
			merge1.input1.connect(passthrough2.output);			
			merge3.input1.connect(source1.output);
			merge3.input2.connect(multiout.output2);
			merge1.input2.connect(merge3.output);
			merge2.input1.connect(merge1.output);
			passthrough3.input.connect(source2.output);
			multiout.input.connect(passthrough3.output);
			passthrough4.input.connect(multiout.output2);
			merge4.input2.connect(passthrough4.output);	
			merge4.input1.connect(source1.output);	
			merge2.input2.connect(merge4.output);
			sink.input.connect(merge2.output);
	
			gr.setup();
			gr.run();
			
			REQUIRE(sink.check());
		}
	}
	
}
